a = "20241005102210,118.352806,32.181984,-1,185.9375,0;20241005102210,118.352806,32.181984,-1,185.9375,0;20241005102210,118.352806,32.181984,-1,185.9375,0;20241005102238,118.3644,32.175568,-1,192.53125,0;20241005102310,118.380875,32.164143,-1,209.59375,0;20241005102406,118.41775,32.122803,-1,245.421875,0;20241005102439,118.43338,32.080948,-1,244.203125,0;20241005102511,118.440025,32.07902,-1,250.046875,0;20241005102555,118.46832,32.058067,-1,254.921875,0;20241005102625,118.4901,32.0453,-1,261.265625,0;20241005102655,118.514366,32.03761,-1,256.28125,0;20241005102727,118.5318,32.031635,-1,252.515625,0;20241005102800,118.5507,32.00837,-1,264,0;20241005102830,118.57781,31.995195,-1,298.140625,0;20241005102901,118.60529,31.986029,-1,280.8125,0;20241005102931,118.63107,31.976793,-1,304.296875,0;20241005103007,118.652824,31.963602,-1,326.703125,0;20241005103107,118.67612,31.929173,-1,312.640625,0;20241005103139,118.69337,31.922043,-1,292.984375,0;20241005103229,118.72981,31.925787,-1,51.46875,0;20241005103302,118.74153,31.934963,-1,54.078125,0;20241005103333,118.75593,31.946747,-1,52.09375,0;20241005103404,118.778854,31.95724,-1,32.296875,0;20241005103502,118.78251,31.961504,-1,71.5625,0;20241005103523,118.787895,31.965425,-1,74.96875,0;20241005103558,118.79507,31.968884,-1,75.1875,0;20241005103635,118.79714,31.969791,-1,83.109375,0;20241005104344,118.79982,31.976572,-1,112.625,0;20241005104415,118.813484,31.969374,-1,118.671875,0;20241005104446,118.82061,31.983055,-1,136.640625,0;20241005104524,118.83194,31.981018,-1,110.78125,0;20241005104532,118.83384,31.980087,-1,112.53125,0;20241005104603,118.84576,31.991755,-1,128.671875,0;20241005104636,118.86787,31.971403,-1,173.171875,0;20241005104728,118.88383,31.95349,-1,156.03125,0;20241005104829,118.89943,31.937984,-1,173.5,0;20241005104854,118.929924,31.90788,-1,167.625,0;20241005104926,118.92941,31.893469,-1,179.515625,0;20241005104958,118.95614,31.86927,-1,179.03125,0;20241005105102,118.96433,31.854465,-1,163.078125,0;20241005105112,118.9669,31.855583,-1,166.21875,0;20241005105200,118.9849,31.832857,-1,176.3125,0;20241005105406,118.9802,31.83237,-1,182.921875,0;20241005105515,118.98442,31.832918,-1,182.59375,0;20241005105617,118.993546,31.82301,-1,199.328125,0;20241005105742,118.99414,31.812496,-1,207.546875,0;20241005105815,119.01137,31.794638,-1,211.828125,0;20241005105845,119.02383,31.777357,-1,192.109375,0;20241005105916,119.02908,31.764952,-1,203,0;20241005105954,119.02959,31.751064,-1,206.0625,0;"
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
import math 

# 地球常量
PI = math.pi
AXIS = 6378245.0  # 长半轴
EE = 0.006693421622965943  # 扁率平方

def out_of_china(lat, lon):
    # 判断是否在中国范围外
    if lon < 72.004 or lon > 137.8347:
        return True
    if lat < 0.8293 or lat > 55.8271:
        return True
    return False

def transform_lat(x, y):
    ret = -100.0 + 2.0*x + 3.0*y + 0.2*y*y + 0.1*x*y + 0.2*math.sqrt(abs(x))
    ret += (20.0*math.sin(6.0*x*PI) + 20.0*math.sin(2.0*x*PI)) * 2.0/3.0
    ret += (20.0*math.sin(y*PI) + 40.0*math.sin(y/3.0*PI)) * 2.0/3.0
    ret += (160.0*math.sin(y/12.0*PI) + 320*math.sin(y*PI/30.0)) * 2.0/3.0
    return ret

def transform_lon(x, y):
    ret = 300.0 + x + 2.0*y + 0.1*x*x + 0.1*x*y + 0.1*math.sqrt(abs(x))
    ret += (20.0*math.sin(6.0*x*PI) + 20.0*math.sin(2.0*x*PI)) * 2.0/3.0
    ret += (20.0*math.sin(x*PI) + 40.0*math.sin(x/3.0*PI)) * 2.0/3.0
    ret += (150.0*math.sin(x/12.0*PI) + 300.0*math.sin(x/30.0*PI)) * 2.0/3.0
    return ret

def gcj02_to_wgs84(lon, lat):
    if out_of_china(lat, lon):
        return lon, lat
    dlat = transform_lat(lon - 105.0, lat - 35.0)
    dlon = transform_lon(lon - 105.0, lat - 35.0)
    radlat = lat / 180.0 * PI
    magic = math.sin(radlat)
    magic = 1 - EE * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((AXIS * (1 - EE)) / (magic * sqrtmagic) * PI)
    dlon = (dlon * 180.0) / (AXIS / sqrtmagic * math.cos(radlat) * PI)
    mglat = lat + dlat
    mglon = lon + dlon
    return lon * 2 - mglon, lat * 2 - mglat

# 解析数据
points = []
for entry in a.strip(';').split(';'):
    fields = entry.split(',')
    time_str = fields[0]
    lon = float(fields[1])
    lat = float(fields[2])
    lon, lat = gcj02_to_wgs84(lon, lat)  # 坐标系转换！
    # 东八区转UTC
    time_local = datetime.strptime(time_str, "%Y%m%d%H%M%S")
    time_utc = time_local - timedelta(hours=8)
    points.append((lat, lon, time_utc))

# 生成GPX XML
gpx = ET.Element('gpx', version="1.1", creator="Generated by Script", xmlns="http://www.topografix.com/GPX/1/1")
trk = ET.SubElement(gpx, 'trk')
trkseg = ET.SubElement(trk, 'trkseg')

for lat, lon, time_utc in points:
    trkpt = ET.SubElement(trkseg, 'trkpt', lat=str(lat), lon=str(lon))
    time_elem = ET.SubElement(trkpt, 'time')
    time_elem.text = time_utc.strftime("%Y-%m-%dT%H:%M:%SZ")

# 文件名，用第一个点的本地时间
first_time_local = datetime.strptime(points[0][2].strftime("%Y%m%d%H%M%S"), "%Y%m%d%H%M%S") + timedelta(hours=8)
file_name = first_time_local.strftime("%Y%m%d%H%M%S") + ".gpx"

# 保存到文件
tree = ET.ElementTree(gpx)
tree.write(file_name, encoding='utf-8', xml_declaration=True)

print(f"GPX文件已生成：{file_name}")