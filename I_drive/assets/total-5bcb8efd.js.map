{"version":3,"file":"total-5bcb8efd.js","sources":["../../src/utils/const.ts","../../src/components/ActivityList/index.tsx","../../src/pages/total.tsx"],"sourcesContent":["// const\nconst MAPBOX_TOKEN =\n  // For security reasons, please avoid using the default public token provided by Mapbox as much as possible.\n  // Instead, manually add a new token and apply URL restrictions.\n  // (please refer to https://github.com/yihong0618/running_page/issues/643#issuecomment-2042668580)\n  'pk.eyJ1IjoieWlob25nMDYxOCIsImEiOiJja2J3M28xbG4wYzl0MzJxZm0ya2Fua2p2In0.PNKfkeQwYuyGOTT_x9BJ4Q';\nconst MUNICIPALITY_CITIES_ARR = [\n  '北京市',\n  '上海市',\n  '天津市',\n  '重庆市',\n  '香港特别行政区',\n  '澳门特别行政区',\n];\nconst MAP_LAYER_LIST = [\n  'road-label',\n  'waterway-label',\n  'natural-line-label',\n  'natural-point-label',\n  'water-line-label',\n  'water-point-label',\n  'poi-label',\n  'airport-label',\n  'settlement-subdivision-label',\n  'settlement-label',\n  'state-label',\n  'country-label',\n];\n\nconst USE_GOOGLE_ANALYTICS = false;\nconst GOOGLE_ANALYTICS_TRACKING_ID = '';\n\n// styling: set to `true` if you want dash-line route\nconst USE_DASH_LINE = false;\n// styling: route line opacity: [0, 1]\nconst LINE_OPACITY = 0.5;\n// styling: map height\nconst MAP_HEIGHT = 600;\n//set to `false` if you want to hide the road label characters\nconst ROAD_LABEL_DISPLAY = true;\n//set to `true` if you want to display only the routes without showing the map.\nconst PRIVACY_MODE = false;\n//set to `false` if you want to make light off as default, only effect when `PRIVACY_MODE` = false\nconst LIGHTS_ON = true;\n//set to `true` if you want to show the 'Elevation Gain' column\nconst SHOW_ELEVATION_GAIN = false;\n// richer title for the activity types (like garmin style)\nconst RICH_TITLE = false;\n\n// IF you outside China please make sure IS_CHINESE = false\nconst IS_CHINESE = true;\nconst ZOOM_BIGMAP_LEVEL = 2;\nconst USE_ANIMATION_FOR_GRID = false;\nconst CHINESE_INFO_MESSAGE = (yearLength: number, year: string): string => {\n  const yearStr = year === 'Total' ? '所有' : ` ${year} `;\n  return `我用 App 记录自己运动 ${yearLength} 年了，下面列表展示的是${yearStr}的数据`;\n};\nconst ENGLISH_INFO_MESSAGE = (yearLength: number, year: string): string =>\n  `Running Journey with ${yearLength} Years, the table shows year ${year} data`;\n\n// not support English for now\nconst CHINESE_LOCATION_INFO_MESSAGE_FIRST =\n  '勇敢地踏上旅程，你会发现，世界远比你想象的大。';\nconst CHINESE_LOCATION_INFO_MESSAGE_SECOND = '纵一苇之所如，凌万顷之茫然。';\n\nconst INFO_MESSAGE = IS_CHINESE ? CHINESE_INFO_MESSAGE : ENGLISH_INFO_MESSAGE;\nconst FULL_MARATHON_RUN_TITLE = IS_CHINESE ? '全程马拉松' : 'Full Marathon';\nconst HALF_MARATHON_RUN_TITLE = IS_CHINESE ? '半程马拉松' : 'Half Marathon';\nconst MORNING_RUN_TITLE = IS_CHINESE ? '清晨跑步' : 'Morning Run';\nconst MIDDAY_RUN_TITLE = IS_CHINESE ? '午间跑步' : 'Midday Run';\nconst AFTERNOON_RUN_TITLE = IS_CHINESE ? '午后跑步' : 'Afternoon Run';\nconst EVENING_RUN_TITLE = IS_CHINESE ? '傍晚跑步' : 'Evening Run';\nconst NIGHT_RUN_TITLE = IS_CHINESE ? '夜晚跑步' : 'Night Run';\nconst RUN_GENERIC_TITLE = IS_CHINESE ? '跑步' : 'Run';\nconst RUN_TRAIL_TITLE = IS_CHINESE ? '越野跑' : 'Trail Run';\nconst RUN_TREADMILL_TITLE = IS_CHINESE ? '跑步机' : 'Treadmill Run';\nconst HIKING_TITLE = IS_CHINESE ? '徒步' : 'Hiking';\nconst CYCLING_TITLE = IS_CHINESE ? '骑行' : 'Cycling';\nconst SKIING_TITLE = IS_CHINESE ? '滑雪' : 'Skiing';\nconst WALKING_TITLE = IS_CHINESE ? '步行' : 'Walking';\nconst ACTIVITY_COUNT_TITLE = IS_CHINESE ? '活动次数' : 'Activity Count';\nconst MAX_DISTANCE_TITLE = IS_CHINESE ? '最远距离' : 'Max Distance';\nconst MAX_SPEED_TITLE = IS_CHINESE ? '最快速度' : 'Max Speed';\nconst TOTAL_TIME_TITLE = IS_CHINESE ? '总时间' : 'Total Time';\nconst AVERAGE_SPEED_TITLE = IS_CHINESE ? '平均速度' : 'Average Speed';\nconst TOTAL_DISTANCE_TITLE = IS_CHINESE ? '总距离' : 'Total Distance';\nconst YEARLY_TITLE = IS_CHINESE ? '按年' : 'Yearly';\nconst MONTHLY_TITLE = IS_CHINESE ? '按月' : 'Monthly';\nconst WEEKLY_TITLE = IS_CHINESE ? '按周' : 'Weekly';\nconst DAILY_TITLE = IS_CHINESE ? '按天' : 'Daily';\nconst LOCATION_TITLE = IS_CHINESE ? '位置' : 'Location';\n\nconst ACTIVITY_TYPES = {\n  RUN_GENERIC_TITLE,\n  RUN_TRAIL_TITLE,\n  RUN_TREADMILL_TITLE,\n  HIKING_TITLE,\n  CYCLING_TITLE,\n  SKIING_TITLE,\n  WALKING_TITLE,\n}\n\nconst RUN_TITLES = {\n  FULL_MARATHON_RUN_TITLE,\n  HALF_MARATHON_RUN_TITLE,\n  MORNING_RUN_TITLE,\n  MIDDAY_RUN_TITLE,\n  AFTERNOON_RUN_TITLE,\n  EVENING_RUN_TITLE,\n  NIGHT_RUN_TITLE,\n};\nconst ACTIVITY_TOTAL = {\n    ACTIVITY_COUNT_TITLE,\n    MAX_DISTANCE_TITLE,\n    MAX_SPEED_TITLE,\n    TOTAL_TIME_TITLE,\n    AVERAGE_SPEED_TITLE,\n    TOTAL_DISTANCE_TITLE,\n    YEARLY_TITLE,\n    MONTHLY_TITLE,\n    WEEKLY_TITLE,\n    DAILY_TITLE,\n    LOCATION_TITLE\n};\n\nexport {\n  USE_GOOGLE_ANALYTICS,\n  GOOGLE_ANALYTICS_TRACKING_ID,\n  CHINESE_LOCATION_INFO_MESSAGE_FIRST,\n  CHINESE_LOCATION_INFO_MESSAGE_SECOND,\n  MAPBOX_TOKEN,\n  MUNICIPALITY_CITIES_ARR,\n  MAP_LAYER_LIST,\n  IS_CHINESE,\n  ROAD_LABEL_DISPLAY,\n  INFO_MESSAGE,\n  RUN_TITLES,\n  USE_ANIMATION_FOR_GRID,\n  USE_DASH_LINE,\n  LINE_OPACITY,\n  MAP_HEIGHT,\n  PRIVACY_MODE,\n  LIGHTS_ON,\n  SHOW_ELEVATION_GAIN,\n  RICH_TITLE,\n  ACTIVITY_TYPES,\n  ACTIVITY_TOTAL,\n  ZOOM_BIGMAP_LEVEL\n};\n\nconst nike = 'rgb(224,237,94)'; // if you want change the main color change here src/styles/variables.scss\nconst dark_vanilla = 'rgb(228,212,220)';\n\n// If your map has an offset please change this line\n// issues #92 and #198\nexport const NEED_FIX_MAP = false;\nexport const MAIN_COLOR = nike;\nexport const PROVINCE_FILL_COLOR = '#47b8e0';\nexport const COUNTRY_FILL_COLOR = dark_vanilla;\n\nexport const RUN_COLOR = MAIN_COLOR;\nexport const RUN_TRAIL_COLOR = 'rgb(255,153,51)';\nexport const CYCLING_COLOR = 'rgb(51,255,87)';\nexport const HIKING_COLOR = 'rgb(151,51,255)';\nexport const WALKING_COLOR = HIKING_COLOR;\nexport const SWIMMING_COLOR = 'rgb(255,51,51)';\n","import React, { useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from 'recharts';\nimport { useNavigate } from 'react-router-dom';\nimport activities from '@/static/activities.json';\nimport styles from './style.module.css';\nimport {ACTIVITY_TOTAL, ACTIVITY_TYPES} from \"@/utils/const\";\n\n// Define interfaces for our data structures\ninterface Activity {\n  start_date_local: string;\n  distance: number;\n  moving_time: string;\n  type: string;\n  location_country?: string;\n}\n\ninterface ActivitySummary {\n  totalDistance: number;\n  totalTime: number;\n  count: number;\n  dailyDistances: number[];\n  maxDistance: number;\n  maxSpeed: number;\n  location: string;\n}\n\ninterface DisplaySummary {\n  totalDistance: number;\n  averageSpeed: number;\n  totalTime: number;\n  count: number;\n  maxDistance: number;\n  maxSpeed: number;\n  location: string;\n}\n\ninterface ChartData {\n  day: number;\n  distance: string;\n}\n\ninterface ActivityCardProps {\n  period: string;\n  summary: DisplaySummary;\n  dailyDistances: number[];\n  interval: string;\n  activityType: string;\n}\n\ninterface ActivityGroups {\n  [key: string]: ActivitySummary;\n}\n\ntype IntervalType = 'year' | 'month' | 'week' | 'day';\n\nconst ActivityCard: React.FC<ActivityCardProps> = ({ period, summary, dailyDistances, interval, activityType }) => {\n    const generateLabels = (): number[] => {\n        if (interval === 'month') {\n            const [year, month] = period.split('-').map(Number);\n            const daysInMonth = new Date(year, month, 0).getDate(); // Get the number of days in the month\n            return Array.from({ length: daysInMonth }, (_, i) => i + 1);\n        } else if (interval === 'week') {\n            return Array.from({ length: 7 }, (_, i) => i + 1);\n        } else if (interval === 'year') {\n            return Array.from({ length: 12 }, (_, i) => i + 1); // Generate months 1 to 12\n        }\n        return [];\n    };\n\n    const data: ChartData[] = generateLabels().map((day) => ({\n        day,\n        distance: (dailyDistances[day - 1] || 0).toFixed(2), // Keep two decimal places\n    }));\n\n    const formatTime = (seconds: number): string => {\n        const h = Math.floor(seconds / 3600);\n        const m = Math.floor((seconds % 3600) / 60);\n        const s = Math.floor(seconds % 60);\n        return `${h}h ${m}m ${s}s`;\n    };\n\n    const formatPace = (speed: number): string => {\n        if (speed === 0) return '0:00';\n        const pace = 60 / speed; // min/km\n        const minutes = Math.floor(pace);\n        const seconds = Math.round((pace - minutes) * 60);\n        return `${minutes}:${seconds < 10 ? '0' : ''}${seconds} min/km`;\n    };\n\n    // Calculate Y-axis maximum value and ticks\n    const yAxisMax = Math.ceil(Math.max(...data.map(d => parseFloat(d.distance))) + 10); // Round up and add buffer\n    const yAxisTicks = Array.from({ length: Math.ceil(yAxisMax / 5) + 1 }, (_, i) => i * 5); // Generate arithmetic sequence\n\n    return (\n        <div className={styles.activityCard}>\n            <h2 className={styles.activityName}>{period}</h2>\n            <div className={styles.activityDetails}>\n                <p><strong>{ACTIVITY_TOTAL.TOTAL_DISTANCE_TITLE}:</strong> {summary.totalDistance.toFixed(2)} km</p>\n                <p><strong>{ACTIVITY_TOTAL.AVERAGE_SPEED_TITLE}:</strong> {activityType === 'ride' ? `${summary.averageSpeed.toFixed(2)} km/h` : formatPace(summary.averageSpeed)}</p>\n                <p><strong>{ACTIVITY_TOTAL.TOTAL_TIME_TITLE}:</strong> {formatTime(summary.totalTime)}</p>\n                {interval !== 'day' && (\n                    <>\n                        <p><strong>{ACTIVITY_TOTAL.ACTIVITY_COUNT_TITLE}:</strong> {summary.count}</p>\n                        <p><strong>{ACTIVITY_TOTAL.MAX_DISTANCE_TITLE}:</strong> {summary.maxDistance.toFixed(2)} km</p>\n                        <p><strong>{ACTIVITY_TOTAL.MAX_SPEED_TITLE}:</strong> {activityType === 'ride' ? `${summary.maxSpeed.toFixed(2)} km/h` : formatPace(summary.maxSpeed)}</p>\n                    </>\n                )}\n                {interval === 'day' && (\n                    <p><strong>{ACTIVITY_TOTAL.LOCATION_TITLE}:</strong> {summary.location || ''}</p>\n                )}\n                {['month', 'week', 'year'].includes(interval) && (\n                    <div className={styles.chart} style={{ height: '250px', width: '100%' }}>\n                        <ResponsiveContainer>\n                            <BarChart data={data} margin={{ top: 20, right: 20, left: -20, bottom: 5 }}>\n                                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#444\" />\n                                <XAxis dataKey=\"day\" tick={{ fill: 'rgb(204, 204, 204)' }} />\n                                <YAxis\n                                    label={{ value: 'km', angle: -90, position: 'insideLeft', fill: 'rgb(204, 204, 204)' }}\n                                    domain={[0, yAxisMax]}\n                                    ticks={yAxisTicks}\n                                    tick={{ fill: 'rgb(204, 204, 204)' }}\n                                />\n                                <Tooltip\n                                    formatter={(value) => `${value} km`}\n                                    contentStyle={{ backgroundColor: 'rgb(36, 36, 36)', border: '1px solid #444', color: 'rgb(204, 204, 204)' }}\n                                    labelStyle={{ color: 'rgb(224, 237, 94)' }}\n                                />\n                                <Bar dataKey=\"distance\" fill=\"rgb(224, 237, 94)\" />\n                            </BarChart>\n                        </ResponsiveContainer>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst ActivityList: React.FC = () => {\n    const [interval, setInterval] = useState<IntervalType>('month');\n    const [activityType, setActivityType] = useState<string>('run');\n    const navigate = useNavigate();\n\n    const toggleInterval = (newInterval: IntervalType): void => {\n        setInterval(newInterval);\n    };\n\n    const filterActivities = (activity: Activity): boolean => {\n        return activity.type.toLowerCase() === activityType;\n    };\n\n    const convertTimeToSeconds = (time: string): number => {\n        const [hours, minutes, seconds] = time.split(':').map(Number);\n        return hours * 3600 + minutes * 60 + seconds;\n    };\n\n    const groupActivities = (interval: IntervalType): ActivityGroups => {\n        return (activities as Activity[]).filter(filterActivities).reduce((acc: ActivityGroups, activity) => {\n            const date = new Date(activity.start_date_local);\n            let key: string;\n            let index: number;\n            switch (interval) {\n                case 'year':\n                    key = date.getFullYear().toString();\n                    index = date.getMonth(); // Return current month (0-11)\n                    break;\n                case 'month':\n                    key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`; // Zero padding\n                    index = date.getDate() - 1; // Return current day (0-30)\n                    break;\n                case 'week':\n                    const currentDate = new Date(date.valueOf());\n                    currentDate.setDate(currentDate.getDate() + 4 - (currentDate.getDay() || 7)); // Set to nearest Thursday (ISO weeks defined by Thursday)\n                    const yearStart = new Date(currentDate.getFullYear(), 0, 1);\n                    const weekNum = Math.ceil((((currentDate.getTime() - yearStart.getTime()) / 86400000) + 1) / 7);\n                    key = `${currentDate.getFullYear()}-W${weekNum.toString().padStart(2, '0')}`;\n                    index = (date.getDay() + 6) % 7; // Return current day (0-6, Monday-Sunday)\n                    break;\n                case 'day':\n                    key = date.toLocaleDateString(\"zh\").replaceAll('/', '-'); // Format date as YYYY-MM-DD\n                    index = 0; // Return 0\n                    break;\n                default:\n                    key = date.getFullYear().toString();\n                    index = 0; // Default return 0\n            }\n\n            if (!acc[key]) acc[key] = {\n                totalDistance: 0,\n                totalTime: 0,\n                count: 0,\n                dailyDistances: [],\n                maxDistance: 0,\n                maxSpeed: 0,\n                location: ''\n            };\n\n            const distanceKm = activity.distance / 1000; // Convert to kilometers\n            const timeInSeconds = convertTimeToSeconds(activity.moving_time);\n            const speedKmh = timeInSeconds > 0 ? distanceKm / (timeInSeconds / 3600) : 0;\n\n            acc[key].totalDistance += distanceKm;\n            acc[key].totalTime += timeInSeconds;\n            acc[key].count += 1;\n\n            // Accumulate daily distances\n            acc[key].dailyDistances[index] = (acc[key].dailyDistances[index] || 0) + distanceKm;\n\n            if (distanceKm > acc[key].maxDistance) acc[key].maxDistance = distanceKm;\n            if (speedKmh > acc[key].maxSpeed) acc[key].maxSpeed = speedKmh;\n\n            if (interval === 'day') acc[key].location = activity.location_country || '';\n\n            return acc;\n        }, {});\n    };\n\n    const activitiesByInterval = groupActivities(interval);\n\n    return (\n        <div className={styles.activityList}>\n            <div className={styles.filterContainer}>\n                <button\n                    className={styles.smallHomeButton}\n                    onClick={() => navigate('/')}\n                >\n                    Home\n                </button>\n                <select onChange={(e) => setActivityType(e.target.value)} value={activityType}>\n                    <option value=\"run\">{ACTIVITY_TYPES.RUN_GENERIC_TITLE}</option>\n                    <option value=\"ride\">{ACTIVITY_TYPES.CYCLING_TITLE}</option>\n                </select>\n                <select\n                    onChange={(e) => toggleInterval(e.target.value as IntervalType)}\n                    value={interval}\n                >\n                    <option value=\"year\">{ACTIVITY_TOTAL.YEARLY_TITLE}</option>\n                    <option value=\"month\">{ACTIVITY_TOTAL.MONTHLY_TITLE}</option>\n                    <option value=\"week\">{ACTIVITY_TOTAL.WEEKLY_TITLE}</option>\n                    <option value=\"day\">{ACTIVITY_TOTAL.DAILY_TITLE}</option>\n                </select>\n            </div>\n            <div className={styles.summaryContainer}>\n                {Object.entries(activitiesByInterval)\n                    .sort(([a], [b]) => {\n                        if (interval === 'day') {\n                            return new Date(b).getTime() - new Date(a).getTime(); // Sort by date\n                        } else if (interval === 'week') {\n                            const [yearA, weekA] = a.split('-W').map(Number);\n                            const [yearB, weekB] = b.split('-W').map(Number);\n                            return yearB - yearA || weekB - weekA; // Sort by year and week number\n                        } else {\n                            const [yearA, monthA = 0] = a.split('-').map(Number);\n                            const [yearB, monthB = 0] = b.split('-').map(Number);\n                            return yearB - yearA || monthB - monthA; // Sort by year and month\n                        }\n                    })\n                    .map(([period, summary]) => (\n                        <ActivityCard\n                            key={period}\n                            period={period}\n                            summary={{\n                                totalDistance: summary.totalDistance,\n                                averageSpeed: summary.totalTime ? (summary.totalDistance / (summary.totalTime / 3600)) : 0,\n                                totalTime: summary.totalTime,\n                                count: summary.count,\n                                maxDistance: summary.maxDistance,\n                                maxSpeed: summary.maxSpeed,\n                                location: summary.location,\n                            }}\n                            dailyDistances={summary.dailyDistances}\n                            interval={interval}\n                            activityType={activityType}\n                        />\n                    ))}\n            </div>\n        </div>\n    );\n};\n\nexport default ActivityList;\n","import React from 'react';\nimport ActivityList from '@/components/ActivityList';\n\nconst HomePage = () => {\n  return (\n    <div>\n      <ActivityList />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["jsxs","jsx","Fragment","useState","interval"],"mappings":"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"}