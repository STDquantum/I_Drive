a = "20250601083556,120.12463,30.269274,1.2799999713897705,21.15625,14.74859619140625;20250601083556,120.12463,30.269274,1.2799999713897705,21.15625,14.74859619140625;20250601083556,120.12463,30.269274,1.2799999713897705,21.15625,14.74859619140625;20250601083600,120.12463,30.26932,1.9600001573562622,272.578125,13.1407470703125;20250601083624,120.12478,30.269514,2.1700000762939453,0.046875,11.597198486328125;20250601083641,120.124985,30.269375,2.430000066757202,359.421875,10.284454345703125;20250601083653,120.125145,30.269283,2.009999990463257,143.984375,10.554962158203125;20250601083656,120.12519,30.26926,1.78000009059906,136.0625,11.469085693359375;20250601083717,120.125435,30.269129,1.5299999713897705,7.0625,11.5048828125;20250601083734,120.12566,30.269016,1.2799999713897705,8.140625,12.18597412109375;20250601083751,120.12588,30.268896,1.5000001192092896,10.828125,12.19012451171875;20250601083807,120.1261,30.268776,1.5299999713897705,26.09375,12.77789306640625;20250601083811,120.12615,30.268751,1.8700000047683716,151.5,13.85260009765625;20250601083827,120.12638,30.268637,1.570000171661377,0.609375,13.2979736328125;20250601083845,120.12662,30.268541,2.6100001335144043,21.46875,14.5897216796875;20250601083902,120.12685,30.268427,1.7300001382827759,71.859375,14.03961181640625;20250601083919,120.12708,30.268322,1.1299999952316284,55.46875,11.9951171875;20250601083936,120.12731,30.268206,2.7799999713897705,49.96875,12.123291015625;20250601083949,120.12751,30.26806,1.1900001764297485,57.734375,9.47265625;20250601084006,120.12776,30.267994,1.1299999952316284,345.546875,9.90667724609375;20250601084023,120.12802,30.267948,1.850000023841858,62.3125,11.32891845703125;20250601084108,120.12828,30.267979,1.350000023841858,35.34375,6.72918701171875;20250601084158,120.124535,30.269127,0,328.828125,0;20250601084257,120.12987,30.268215,0,285.734375,0;20250601084725,120.12932,30.274319,-1,134.015625,0;20250601084734,120.128876,30.268015,-1,134.890625,0;20250601084740,120.12932,30.274319,-1,137.015625,0;20250601084751,120.128876,30.268015,-1,134.96875,0;20250601084816,120.12997,30.276815,-1,103.90625,0;20250601085005,120.12957,30.282717,-1,102.390625,0;20250601085610,120.11789,30.282227,-1,206.515625,0;20250601085753,120.109604,30.28193,-1,353.390625,0;20250601085927,120.09821,30.28923,-1,172.5625,0;20250601090339,120.097916,30.300032,-1,183.25,0;20250601090812,120.07672,30.294115,-1,163.453125,0;20250601091312,120.076775,30.293486,0.6600000858306885,293.625,20.324462890625;20250601091328,120.0766,30.293655,0.6700000762939453,50.765625,12.40509033203125;20250601091346,120.07639,30.293793,1.5800000429153442,52.453125,13.82061767578125;20250601091404,120.07617,30.29381,2.299999952316284,288.953125,12.6212158203125;20250601091408,120.07608,30.293865,2.4600000381469727,287.453125,11.4246826171875;20250601091414,120.07597,30.29384,1.5500000715255737,290.640625,13.59765625;20250601091419,120.07592,30.293854,1.440000057220459,297.359375,14.72503662109375;20250601091422,120.07587,30.293867,1.4600000381469727,305.5,14.827880859375;"
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
import math 

# 地球常量
PI = math.pi
AXIS = 6378245.0  # 长半轴
EE = 0.006693421622965943  # 扁率平方

def out_of_china(lat, lon):
    # 判断是否在中国范围外
    if lon < 72.004 or lon > 137.8347:
        return True
    if lat < 0.8293 or lat > 55.8271:
        return True
    return False

def transform_lat(x, y):
    ret = -100.0 + 2.0*x + 3.0*y + 0.2*y*y + 0.1*x*y + 0.2*math.sqrt(abs(x))
    ret += (20.0*math.sin(6.0*x*PI) + 20.0*math.sin(2.0*x*PI)) * 2.0/3.0
    ret += (20.0*math.sin(y*PI) + 40.0*math.sin(y/3.0*PI)) * 2.0/3.0
    ret += (160.0*math.sin(y/12.0*PI) + 320*math.sin(y*PI/30.0)) * 2.0/3.0
    return ret

def transform_lon(x, y):
    ret = 300.0 + x + 2.0*y + 0.1*x*x + 0.1*x*y + 0.1*math.sqrt(abs(x))
    ret += (20.0*math.sin(6.0*x*PI) + 20.0*math.sin(2.0*x*PI)) * 2.0/3.0
    ret += (20.0*math.sin(x*PI) + 40.0*math.sin(x/3.0*PI)) * 2.0/3.0
    ret += (150.0*math.sin(x/12.0*PI) + 300.0*math.sin(x/30.0*PI)) * 2.0/3.0
    return ret

def gcj02_to_wgs84(lon, lat):
    if out_of_china(lat, lon):
        return lon, lat
    dlat = transform_lat(lon - 105.0, lat - 35.0)
    dlon = transform_lon(lon - 105.0, lat - 35.0)
    radlat = lat / 180.0 * PI
    magic = math.sin(radlat)
    magic = 1 - EE * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((AXIS * (1 - EE)) / (magic * sqrtmagic) * PI)
    dlon = (dlon * 180.0) / (AXIS / sqrtmagic * math.cos(radlat) * PI)
    mglat = lat + dlat
    mglon = lon + dlon
    return lon * 2 - mglon, lat * 2 - mglat

# 解析数据
points = []
for entry in a.strip(';').split(';'):
    fields = entry.split(',')
    time_str = fields[0]
    lon = float(fields[1])
    lat = float(fields[2])
    lon, lat = gcj02_to_wgs84(lon, lat)  # 坐标系转换！
    # 东八区转UTC
    time_local = datetime.strptime(time_str, "%Y%m%d%H%M%S")
    time_utc = time_local - timedelta(hours=8)
    points.append((lat, lon, time_utc))

# 生成GPX XML
gpx = ET.Element('gpx', version="1.1", creator="Generated by Script", xmlns="http://www.topografix.com/GPX/1/1")
trk = ET.SubElement(gpx, 'trk')
trkseg = ET.SubElement(trk, 'trkseg')

for lat, lon, time_utc in points:
    trkpt = ET.SubElement(trkseg, 'trkpt', lat=str(lat), lon=str(lon))
    time_elem = ET.SubElement(trkpt, 'time')
    time_elem.text = time_utc.strftime("%Y-%m-%dT%H:%M:%SZ")

# 文件名，用第一个点的本地时间
first_time_local = datetime.strptime(points[0][2].strftime("%Y%m%d%H%M%S"), "%Y%m%d%H%M%S") + timedelta(hours=8)
file_name = first_time_local.strftime("%Y%m%d%H%M%S") + ".gpx"

# 保存到文件
tree = ET.ElementTree(gpx)
tree.write(file_name, encoding='utf-8', xml_declaration=True)

print(f"GPX文件已生成：{file_name}")